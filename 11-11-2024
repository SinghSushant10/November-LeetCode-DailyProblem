#2601. Prime Subtraction Operation
Input: nums = [4,9,6,10]
Output: true
Explanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].
In the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].
After the second operation, nums is sorted in strictly increasing order, so the answer is true.


class Solution {
    boolean[] isPrime = new boolean[1000];
        //sieve of Eratosthnes to mark prime number up to 1000
        void sieve(){  //O(n)
            Arrays.fill(isPrime,true); //intialize to all values to true 
            isPrime[0] = false; //0 is not a prime number 
            isPrime[1] = false; //1 is not a prime number 

            for(int i=2;i*i<1000;i++){
                if(isPrime[i]){
                    for(int j=i*i;j<1000;j+=i){
                        isPrime[j]=false;
                    }
                }
            }
        }
    public boolean primeSubOperation(int[]nums){
        int n = nums.length;
        sieve(); // populates the isPrime array with prime indicators 
        //loop through the array from the second-last element to the start 
        for(int i=n-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                continue;
            }
            //find the largest prime 'p' less than nums[i]
            for(int p=2;p<nums[i];p++){
                if(!isPrime[p]){
                    continue;
                }

                if(nums[i]-p<nums[i+1]){
                    nums[i] -= p;
                    break;
                }
            }
              //check if the conditon still holds; if not, return false
                if(nums[i]>=nums[i+1]){
                 return false;
                }
        }
            return true;
    }
}
